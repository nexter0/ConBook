<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>